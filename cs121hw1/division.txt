-- [Problem 1a]
-- The left side of the definition outputs all four names. Inside the right side
-- of the equation, the cartesian product creates all the possible combinations of
-- the names and the foods (apples, oranges, and bananas). The most right algebra
-- projects the monkey_likes relation. Since the monkey_likes relation is being subtracted,
-- it does not matter that tofu is included since it is not part of the cartesian product.
-- Tofu is ignored, and the names projected are the ones that have all three of the food values.
-- This is similar to how Anderson and Jackson are ignored on slide 17 of Lecture 2.
 





-- [Problem 1b]
-- There are errors when I try to add "r DIVIDE[E] s" so I left it out.
-- This formula takes all the names from regular divide, including the ones that have extra
-- like tofu. Then, it subtracts the opposite of the regular divide. It takes monkey_likes and subtracts
-- the cartesian product of the name and food. This ends with the names with extra values. It will then
-- subtract the extra names from the names given from regular divide. If the name is in the output of 
-- regular divison, it will get rid of it. If the name is not, it is ignored.

(r DIVIDE s) MINUS (PI[R MINUS S](PI[R MINUS S, S](r) MINUS PI[R MINUS S](r) CROSS s));





-- [Problem 1c]

-- The error checking code is being weird with r - s being before group so I wrote it differently
-- This natural join eliminates all the random variables in R that are not in S. It then counts
-- the number of values from S in R and compares that to the count in S. If they are the same,
-- the identifier R - S is projected
PI[R MINUS S](SIGMA[var1 = var2]([rMINUSs]GROUP[count_distinct(s) as var1](r BOWTIE s) CROSS [s]GROUP[count_distinct(s) as var2](s)));